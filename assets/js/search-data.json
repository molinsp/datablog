{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "import pandas as pd from fastdata.integrations import * from fastdata.core import * import plotly.express as px from IPython.display import HTML . Goal . The goal of this analysis is to help you understand what the deal is with the Astra Zeneca vaccine, specifically the risks reported by the media and the conclusions of the last European Medical Agency (EMA) report. . The report is based on EMA data published here. . The analysis does not aim to challenge the underlying data, but rather make part of the report easier to understand without going through a 50 page EMA report. . DISCLAIMER: The author is not an expert in the field, and is applying some general statistical thinking to the problem. Therefore, it may contain errors, omissions or otherwise not accurate information. . Methodology . Introduction . The EMA report performs some observed to expected analysis (OE) in the report to try to understand the potential risks of the vaccine. We will focus on the &quot;EMA analysis of EudraVigilance data&quot; (sction 3.1.5 in the report). . Expected to observed analysis: . The logic of this analysis is to compare how many cases you have observed with one condition (observed) vs. how many usually happen (expected). With this, you can calculate an Observed to Expected Ration, which is defined as # of observed cases / # expected cases. . The statistical uncertainty will often be driven by the observed number of cases, which is often small (rare events). To deal with this statistical uncertainty around the total number of cases observed over the risk period of interest, a 95% Poisson exact confidence interval (95%CI) is often used (more on this later). . EudraVigilance database: . EudraVigilance is a database with information about suspected adverse reactions to medicines which have been authorised or being studied in clinical trials in the European Economic Area (EEA). Source . This section performs an OE analysis 3 types of conditions present in the EudraVigilance database: . Disseminated intravascular coagulation | Cerebral Venous Sinus Thrombosis | Embolic and thrombotic events | . Data sources . A key input for the analysis is the incidence rate of the specific condition, to be able to determine the expected cases. It is useful also if the data is stratified by groups, to be able to analyize not just the general population as a whole but also individual subgroups. . The databases used for the main analysis for the three events investigated are: . Coagulation disorder (this was used to compare with the SMQ Embolic and thrombotic events): ARS from Italy | Disseminated intravascular coagulation: FISABIO from Spain | Cerebral venous sinus thrombosis: ARS from Italy | . Analysis of potential side-effects . Disseminated intravascular coagulation (DIC) . Disseminated intravascular coagulation (DIC) is a rare but serious condition that causes abnormal blood clotting throughout the body’s blood vessels. It is caused by another disease or condition, such as an infection or injury, that makes the body’s normal blood clotting process become overactive. . Source: US NIH . For those of us that are not medicine exprts, this diagram shows of a thrombus (blood clot) that has blocked a blood vessel valve. . . Load and clean the data . dic = gsheet_to_df( url=&quot;https://docs.google.com/spreadsheets/d/11yJ8GbArmcazWG8UdsSWD2gY2VIVD7l_zaPOdiF2ePY&quot;, start_row=2, sheet=&quot;DIC&quot;) . dic = dic.drop( columns=[&quot;EEA Expected 14d&quot;,&quot;EEA Observed 14d From EV&quot;,&quot;EEA OE 14d with 95% c.i.&quot;]) . dic[&quot;oe_ci_interval_min&quot;] = dic[&quot;EEA+UK OE 14d with 95% c.i.&quot;].fdt.clean_text_column( mode=&quot;custom&quot;, keep_unmatched=False, regex=&quot;( d+?[,.] d+) - d+?[,.] d+&quot;) . dic[&quot;oe_ci_interval_max&quot;] = dic[&quot;EEA+UK OE 14d with 95% c.i.&quot;].fdt.clean_text_column( mode=&quot;custom&quot;, keep_unmatched=False, regex=&quot; d+?[,.] d+ - ( d+?[,.] d+)&quot;) . dic[&quot;oe&quot;] = dic[&quot;EEA+UK OE 14d with 95% c.i.&quot;].fdt.clean_text_column( mode=&quot;before_character&quot;, keep_unmatched=False, character=&quot;(&quot;) . dic = dic.drop( columns=[&quot;EEA+UK OE 14d with 95% c.i.&quot;]) . dic = dic.astype( dtype={&quot;IR per 100,000 Person years From FISABIO&quot; : &quot;float64&quot;, &quot;EEA+UK Expected 14d&quot; : &quot;float64&quot;, &quot;EEA+UK Observed 14d From EV&quot; : &quot;float64&quot;, &quot;oe_ci_interval_min&quot; : &quot;float64&quot;, &quot;oe_ci_interval_max&quot; : &quot;float64&quot;, &quot;oe&quot; : &quot;float64&quot;}) . Expected vs. observed analysis . We see that for age groups below 50, there are more expected cases than observed cases, and therefore it is clear there is no risk. . HTML(px.bar(dic, title=&quot;Expected vs. observed cases&quot;, barmode=&quot;group&quot;, template=&quot;seaborn&quot;, x=[&quot;EEA+UK Expected 14d&quot;,&quot;EEA+UK Observed 14d From EV&quot;], y=&quot;Age group&quot;).to_html(include_plotlyjs=&#39;cdn&#39;)) . . .",
            "url": "https://molinsp.github.io/datablog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://molinsp.github.io/datablog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://molinsp.github.io/datablog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://molinsp.github.io/datablog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}